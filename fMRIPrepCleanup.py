#Imports relevant modules.
import os
import sys
import shutil


# ------------------------------------- COMMAND LINE ARGUMENTS -------------------------------------


#Collects arguments given by the user in the command line.
args = sys.argv[1:]
arg_dict = {}
expected_args = ['-dir', '-method']

#Checks that the user has provided the correct number of arguments, and quits if not.
if len(args) != 4:
    print("Incorrect usage. Usage should be: fMRIPrepCleanup.py -dir <fMRIPrep directory> -method <'sim'/'delete'>")
    sys.exit(1)

#Parse the command line arguments.
for i in range(0, len(args), 2):
    arg = args[i]
    value = args[i+1]
    if arg not in expected_args:
        print("Invalid argument: {}".format(arg))
        sys.exit(1)
    arg_dict[arg] = value

#Saves command line arguments as variables that will be used below. 'method' is set such that it is insensitive to case.
fmriprep_dir = arg_dict['-dir']
method = arg_dict['-method'].lower()

#Checks whether the fMRIPrep directory exists. If not, a warning is printed to the user and the script quits.
if not os.path.exists(fmriprep_dir):
	print("The specified fMRIPrep directory ({}) does not exist.".format(fmriprep_dir))
	sys.exit()


# ---------------------------------------- USER SANITY CHECK ---------------------------------------


#A list of 'target strings' that we'll use to index files we want to keep. This will effectively capture preprocessed
#structural and functional images in any output sapce requested, corresponding brain masks, confounds generated by fMRIPrep,
#the HTML output report for each subject, the HTML and SVG images used to populate the output report, and the estimated
#carbon emissions file generated by CodeCarbon.
target_strings = ['preproc', 'brain_mask', 'confounds', 'html', 'svg', 'emissions']

#Before proceeding, the script will require the user to confirm that they are happy to proceed with either
#simulation (symbolic links of files to be kept will be made) or deletion (non-target files will be deleted).
#If 'Y' is given, the script will proceed. If 'N' is given, it'll quit.
if method == 'sim':
	print("You have selected SIMULATION mode. Symbolic links will be used to create a replica of how your fMRIPrep data would look after cleanup (deleting), in your current working directory.")
	print("No actual files will be lost or moved. This will simulate deleting all files within '{}' that do not contain one of the following strings:".format(fmriprep_dir))

elif method == 'delete':
	print("WARNING, you have selected DELETION mode, and are about to delete all files within '{}' that do not contain one of the following strings:".format(fmriprep_dir))

else:
	print("Invalid 'method' provided. In the command line, please provide a -method that is either 'sim' (simulation mode) or 'delete' (deletion) mode")
	sys.exit()

for target in target_strings:
	print(target)
print("This should include ALL files generated in the 'working directory', as well as any in the 'fsaverage' subfolder")

while True:
	choice = input('Do you want to continue? (Y/N)').lower()
	if choice == 'n':
		print("Exiting...")
		sys.exit()
	elif choice == 'y':
		print("Proceeding...")		
		break
	else:
		print("***Please type either 'Y' to proceed and delete non-target files, or 'N' to quit.  ***")


# ----------------------------------------- SIMULATION MODE ----------------------------------------


#If simulation mode is selected...
if method == 'sim':

	#Create a new folder for symbolic links. If the folder already exists, it's deleted.
	link_dir = os.path.join(os.getcwd(), 'fMRIPrepCleanup_Simulation')

	if not os.path.exists(link_dir):
		os.mkdir(link_dir)
		print("Simulation folder created:", link_dir)

	else:
		print("Emptying and replacing simulation folder...:", link_dir)
		shutil.rmtree(link_dir)
		os.mkdir(link_dir)

	#Uses the 'walk' function to iterate over folders and files in the fMRIPrep directory.
	for root, dirs, files in os.walk(fmriprep_dir, topdown = False):
		for filename in files:
			file_path = os.path.join(root, filename)

			#Certain files are skipped here given that they'll slip through the cracks when looking for target strings.
			if 'index' in filename or 'single_subject' in file_path or 'fsaverage' in file_path:
				continue

			#For any files that contain one of our target strings, a symbolic link will be made to them using their
			#relative path within the fMRIPrep directory.
			elif any(target in filename for target in target_strings):
			
				link_path = os.path.join(link_dir, os.path.relpath(file_path, fmriprep_dir))
				os.makedirs(os.path.dirname(link_path), exist_ok=True)
				os.symlink(file_path, link_path)
				print("Created symbolic link:", link_path)


# ------------------------------------------ DELETION MODE -----------------------------------------


#If deletion mode is selected...
elif method == 'delete':

	#Uses the 'walk' function to iterate over folders and files in the fMRIPrep directory.
	for root, dirs, files in os.walk(fmriprep_dir, topdown = False):
		for filename in files:
			file_path = os.path.join(root, filename)

			#If there aren't any target strings in a given filename or if the
			#file is named 'index.html' (an exception to our retention rule), they are deleted.
			if not any(target in filename for target in target_strings) or 'index' in filename:

				print("Deleting file:", file_path)
				os.remove(file_path)


		#Iterates over each folder in the fMRIPrep directory.
		for dir_name in dirs:
			subdirectory = os.path.join(root, dir_name)

			#If a folder is totally empty, it's removed.
			if len(os.listdir(subdirectory)) == 0:
				os.rmdir(subdirectory)
				print("Deleted empty directory:", subdirectory)

			#A folder is also removed if it contains the string 'single_subject' or 'fsaverage'.
			#These are folders that we don't need, but several files within them slip through the cracks
			#when searching for our target strings.
			elif 'single_subject' in subdirectory or 'fsaverage' in subdirectory:
				shutil.rmtree(subdirectory)
